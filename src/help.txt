const int FS_MAGIC           = 0xf0f03410;
const int INODES_PER_BLOCK   = 128;
const int POINTERS_PER_INODE = 5;
const int POINTERS_PER_BLOCK = 1024;

struct fs_superblock {
	int magic; //numero magico
	int nblocks; //numero de blocos total
	int ninodeblocks; //blocos reservados para inodos
	int ninodes; //num total de inodos
};

struct fs_inode {
	int isvalid;
	int size;
	int direct[POINTERS_PER_INODE];
	int indirect;
};

union fs_block {
	struct fs_superblock super;
	struct fs_inode inode[INODES_PER_BLOCK];
	int pointers[POINTERS_PER_BLOCK];
	char data[DISK_BLOCK_SIZE];
};

#define DISK_BLOCK_SIZE 4096

int  disk_init( const char *filename, int nblocks );
int  disk_size();
void disk_read( int blocknum, char *data );
void disk_write( int blocknum, const char *data );
void disk_close();
int aux_findid(int inumber); //procurar qual inodo esta referenciado o dado inumber

static int do_copyin( const char *filename, int inumber );
static int do_copyout( int inumber, const char *filename );

/*
Um disco eh inicializado com um superbloco, 10% do tamanho total para inodos
e o resto de blocos de dados.

Se indirect referenciar a um numero, este numero e o bloco contera o vetor
pointers informando quais blocos sao referenciados indiretamente.

Union faz que que as estruturas contidas nela, compartilhem o mesmo endereco,
sendo que o tamanho da union eh o da maior estrutura contida nela.
*/
	if(length > 0 && inode.inode[inode_index].indirect != 0) {
		Debug<READ_TRAIT>::msg("fs_read: reading from indirects");
		union fs_block indirect;
		disk_read(inode.inode[inode_index].indirect, indirect.data);
		for(int i = begin_block - POINTERS_PER_INODE; i < POINTERS_PER_BLOCK; i++) {
			length_read = length - begin_byte;
			if (length_read > DISK_BLOCK_SIZE){
				length_read = DISK_BLOCK_SIZE - begin_byte;
			}
			if(length_read > size_left){
				Debug<READ_TRAIT>::msg("fs_read: trying to read " + std::to_string(length_read) + " but size_left is " + std::to_string(size_left) + " bytes!");
				length_read = size_left;
			}
			length -= length_read;
			size_left -= length_read;
			Debug<READ_TRAIT>::msg("fs_read: reading " + std::to_string(length_read) + " bytes, remaining " + std::to_string(length) + " bytes!");
			#if READ_TRAIT == 1
				if(length < 0){
					std::cout << std::endl;
					Debug<READ_TRAIT>::msg("fs_read: length < 0");
				}
				if(size_left < 0){
					std::cout << std::endl;
					Debug<READ_TRAIT>::msg("fs_read: size_left < 0");
				}
			#endif

			if(indirect.pointers[i] == 0) break;
			disk_read(indirect.pointers[i],data_block.data);
			std::memcpy(&data[cursor],&data_block.data[begin_byte],length_read);
			begin_byte = 0;
			cursor += length_read;
			if(length == 0 || size_left == 0) break;
		}
		Debug<READ_TRAIT>::msg("fs_read: finished reading from indirects");

	}
