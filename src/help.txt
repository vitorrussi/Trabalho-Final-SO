const int FS_MAGIC           = 0xf0f03410;
const int INODES_PER_BLOCK   = 128;
const int POINTERS_PER_INODE = 5;
const int POINTERS_PER_BLOCK = 1024;

struct fs_superblock {
	int magic; //numero magico
	int nblocks; //numero de blocos total
	int ninodeblocks; //blocos reservados para inodos
	int ninodes; //num total de inodos
};

struct fs_inode {
	int isvalid;
	int size;
	int direct[POINTERS_PER_INODE];
	int indirect;
};

union fs_block {
	struct fs_superblock super;
	struct fs_inode inode[INODES_PER_BLOCK];
	int pointers[POINTERS_PER_BLOCK];
	char data[DISK_BLOCK_SIZE];
};

#define DISK_BLOCK_SIZE 4096

int  disk_init( const char *filename, int nblocks );
int  disk_size();
void disk_read( int blocknum, char *data );
void disk_write( int blocknum, const char *data );
void disk_close();

lendo os valores das imagens em hexa(vai brasil):

/*
Um disco eh inicializado com um superbloco, 10% do tamanho total para inodos
e o resto de blocos de dados.

Se indirect referenciar a um numero, este numero e o bloco contera o vetor
pointers informando quais blocos sao referenciados indiretamente.

Union faz que que as estruturas contidas nela, compartilhem o mesmo endereco,
sendo que o tamanho da union eh o da maior estrutura contida nela.
*/
